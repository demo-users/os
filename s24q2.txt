#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX 100

void count_characters(char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found.\n");
        return;
    }
    int ch, count = 0;
    while ((ch = fgetc(fp)) != EOF)
        count++;
    fclose(fp);
    printf("Characters: %d\n", count);
}

void count_words(char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found.\n");
        return;
    }
    int ch, in_word = 0, count = 0;
    while ((ch = fgetc(fp)) != EOF) {
        if (ch == ' ' || ch == '\n' || ch == '\t') {
            in_word = 0;
        } else if (in_word == 0) {
            in_word = 1;
            count++;
        }
    }
    fclose(fp);
    printf("Words: %d\n", count);
}

void count_lines(char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found.\n");
        return;
    }
    int ch, count = 0;
    while ((ch = fgetc(fp)) != EOF) {
        if (ch == '\n')
            count++;
    }
    fclose(fp);
    printf("Lines: %d\n", count);
}

int main() {
    char input[MAX];
    char *args[10];

    while (1) {
        printf("myshell$ ");
        fflush(stdout);

        if (fgets(input, sizeof(input), stdin) == NULL)
            break;

        input[strcspn(input, "\n")] = 0;

        int i = 0;
        char *token = strtok(input, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (args[0] == NULL)
            continue;

        if (strcmp(args[0], "exit") == 0)
            break;

        if (strcmp(args[0], "count") == 0 && i == 3) {
            if (strcmp(args[1], "c") == 0) {
                count_characters(args[2]);
            } else if (strcmp(args[1], "w") == 0) {
                count_words(args[2]);
            } else if (strcmp(args[1], "l") == 0) {
                count_lines(args[2]);
            } else {
                printf("Invalid count option. Use c, w, or l.\n");
            }
            continue;
        }

        pid_t pid = fork();
        if (pid == 0) {
            execvp(args[0], args);
            printf("Command not found.\n");
            exit(1);
        } else {
            wait(NULL);
        }
    }

    return 0;
}

