#include <stdio.h>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
};

int main() {
    int n, time = 0, completed = 0, tq;
    float total_wt = 0, total_tat = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &p[i].arrival_time);
        printf("Enter burst time for P%d: ", i + 1);
        scanf("%d", &p[i].burst_time);
        p[i].remaining_time = p[i].burst_time;
        p[i].waiting_time = 0;
        p[i].turnaround_time = 0;
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &tq);

    int queue[100], front = 0, rear = 0, visited[n];
    for (int i = 0; i < n; i++) visited[i] = 0;

    printf("\nGantt Chart:\n");
    queue[rear++] = 0;
    visited[0] = 1;

    while (completed < n) {
        int i = queue[front++];
        if (p[i].remaining_time > 0) {
            if (p[i].remaining_time > tq) {
                printf("| P%d ", p[i].pid);
                time += tq;
                p[i].remaining_time -= tq;
            } else {
                printf("| P%d ", p[i].pid);
                time += p[i].remaining_time;
                p[i].waiting_time = time - p[i].arrival_time - p[i].burst_time;
                p[i].turnaround_time = time - p[i].arrival_time;
                p[i].remaining_time = 0;
                completed++;
            }

            for (int j = 0; j < n; j++) {
                if (j != i && !visited[j] && p[j].arrival_time <= time) {
                    queue[rear++] = j;
                    visited[j] = 1;
                }
            }

            if (p[i].remaining_time > 0) {
                queue[rear++] = i;
            }
        }

        if (front == rear && completed < n) {
            for (int j = 0; j < n; j++) {
                if (p[j].remaining_time > 0) {
                    queue[rear++] = j;
                    visited[j] = 1;
                    break;
                }
            }
        }
    }

    printf("|\n");

    printf("\nProcess\tAT\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        total_wt += p[i].waiting_time;
        total_tat += p[i].turnaround_time;
        printf("P%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f", total_wt / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);

    return 0;
}

