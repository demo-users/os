#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT 1024
#define MAX_TOKENS 10

void search_first_occurrence(const char *filename, const char *pattern) {
    FILE *fp = fopen(filename, "r");
    if (!fp) {
        perror("File open error");
        return;
    }
    char line[1024];
    int line_num = 0;
    while (fgets(line, sizeof(line), fp)) {
        line_num++;
        if (strstr(line, pattern)) {
            printf("First occurrence at line %d: %s", line_num, line);
            fclose(fp);
            return;
        }
    }
    printf("Pattern not found\n");
    fclose(fp);
}

int main() {
    char input[MAX_INPUT];
    char *tokens[MAX_TOKENS];
    while (1) {
        printf("myshell$ ");
        if (!fgets(input, sizeof(input), stdin)) {
            break;
        }
        input[strcspn(input, "\n")] = 0;
        int i = 0;
        char *token = strtok(input, " ");
        while (token && i < MAX_TOKENS - 1) {
            tokens[i++] = token;
            token = strtok(NULL, " ");
        }
        tokens[i] = NULL;
        if (i == 0) continue;
        if (strcmp(tokens[0], "exit") == 0) {
            break;
        }
        if (strcmp(tokens[0], "search") == 0) {
            if (i == 4 && strcmp(tokens[1], "f") == 0) {
                search_first_occurrence(tokens[2], tokens[3]);
            } else {
                printf("Invalid command. Usage: search f filename pattern\n");
            }
            continue;
        }
        pid_t pid = fork();
        if (pid < 0) {
            perror("fork failed");
            continue;
        }
        if (pid == 0) {
            execvp(tokens[0], tokens);
            perror("exec failed");
            exit(1);
        } else {
            wait(NULL);
        }
    }
    return 0;
}

