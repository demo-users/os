#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>

void make_tokens(char *input, char *tokens[]) {
    int i = 0;
    char *token = strtok(input, " ");
    while (token != NULL) {
        tokens[i++] = token;
        token = strtok(NULL, " ");
    }
    tokens[i] = NULL;
}

void count_command(char option, char *filename) {
    int fd = open(filename, O_RDONLY);
    if (fd == -1) {
        printf("Error: Cannot open file '%s'\n", filename);
        return;
    }

    char ch;
    int char_count = 0, word_count = 0, line_count = 0;
    int in_word = 0;

    while (read(fd, &ch, 1) > 0) {
        char_count++;
        if (ch == '\n') line_count++;
        if (ch == ' ' || ch == '\n' || ch == '\t') {
            in_word = 0;
        } else if (!in_word) {
            in_word = 1;
            word_count++;
        }
    }

    close(fd);

    switch (option) {
        case 'c':
            printf("Number of characters: %d\n", char_count);
            break;
        case 'w':
            printf("Number of words: %d\n", word_count);
            break;
        case 'l':
            printf("Number of lines: %d\n", line_count);
            break;
        default:
            printf("Invalid option for count. Use 'c', 'w', or 'l'.\n");
    }
}

int main() {
    char input[100], *tokens[10];
    int pid;

    while (1) {
        printf("myshell$ ");
        fflush(stdout);
        if (fgets(input, sizeof(input), stdin) == NULL)
            continue;
        input[strcspn(input, "\n")] = '\0';
        make_tokens(input, tokens);
        if (tokens[0] == NULL) continue;
        if (strcmp(tokens[0], "exit") == 0)
            break;
        if (strcmp(tokens[0], "count") == 0) {
            if (tokens[1] != NULL && tokens[2] != NULL) {
                count_command(tokens[1][0], tokens[2]);
            } else {
                printf("Usage: count [c|w|l] filename\n");
            }
        } else {
            pid = fork();
            if (pid < 0) {
                perror("Fork failed");
            } else if (pid == 0) {
                if (execvp(tokens[0], tokens) == -1) {
                    perror("Command execution failed");
                }
                exit(1);
            } else {
                wait(NULL);
            }
        }
    }

    return 0;
}

