#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>

void make_toks(char *s, char *tok[])
{
    int i = 0;
    char *p = strtok(s, " ");
    while (p != NULL)
    {
        tok[i++] = p;
        p = strtok(NULL, " ");
    }
    tok[i] = NULL;
}

void list_command(char *option, char *dirname)
{
    DIR *dir;
    struct dirent *entry;
    int count = 0;
    char path[1024];
    struct stat st;

    dir = opendir(dirname);
    if (dir == NULL)
    {
        perror("Cannot open directory");
        return;
    }

    if (strcmp(option, "f") == 0)
    {
        while ((entry = readdir(dir)) != NULL)
        {
            snprintf(path, sizeof(path), "%s/%s", dirname, entry->d_name);
            if (stat(path, &st) == 0 && S_ISREG(st.st_mode))
            {
                printf("%s\n", entry->d_name);
            }
        }
    }
    else if (strcmp(option, "n") == 0)
    {
        while ((entry = readdir(dir)) != NULL)
        {
            count++;
        }
        printf("Total entries: %d\n", count);
    }
    else
    {
        printf("Invalid list option.\n");
    }

    closedir(dir);
}

int main()
{
    char input[100], *args[10];
    int pid, status;

    while (1)
    {
        printf("myshell$ ");
        if (!fgets(input, sizeof(input), stdin))
            break;

        input[strcspn(input, "\n")] = '\0';

        make_toks(input, args);

        if (args[0] == NULL)
            continue;

        if (strcmp(args[0], "exit") == 0)
            exit(0);

        if (strcmp(args[0], "list") == 0 && args[1] != NULL && args[2] != NULL)
        {
            list_command(args[1], args[2]);
            continue;
        }

        pid = fork();
        if (pid == 0)
        {
            execvp(args[0], args);
            perror("Command execution failed");
            exit(1);
        }
        else if (pid > 0)
        {
            waitpid(pid, &status, 0);
        }
        else
        {
            perror("Fork failed");
        }
    }

    return 0;
}

