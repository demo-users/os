#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_LEN 1024
#define MAX_ARGS 100

void search(char **args, int count) {
    if (count < 4) {
        printf("Invalid search command\n");
        return;
    }

    char *mode = args[1];
    char *filename = args[2];
    char *pattern = args[3];

    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("File not found!\n");
        return;
    }

    char line[1024];
    int line_no = 1, found = 0, total = 0;

    while (fgets(line, sizeof(line), file)) {
        if (strstr(line, pattern)) {
            if (strcmp(mode, "f") == 0) {
                printf("First occurrence at line %d: %s", line_no, line);
                found = 1;
                break;
            }
            else if (strcmp(mode, "c") == 0) {
                char *p = line;
                while ((p = strstr(p, pattern)) != NULL) {
                    total++;
                    p += strlen(pattern);
                }
            }
        }
        line_no++;
    }

    if (strcmp(mode, "f") == 0 && !found) {
        printf("Pattern not found in file.\n");
    }

    if (strcmp(mode, "c") == 0) {
        printf("Total occurrences of '%s': %d\n", pattern, total);
    }

    fclose(file);
}

int main() {
    char input[MAX_LEN];
    char *args[MAX_ARGS];

    while (1) {
        printf("myshell$ ");
        fflush(stdout);

        if (fgets(input, sizeof(input), stdin) == NULL) {
            break;
        }

        input[strcspn(input, "\n")] = 0;

        int arg_count = 0;
        char *token = strtok(input, " ");
        while (token != NULL) {
            args[arg_count++] = token;
            token = strtok(NULL, " ");
        }
        args[arg_count] = NULL;

        if (arg_count == 0) {
            continue;
        }

        if (strcmp(args[0], "exit") == 0) {
            break;
        }

        if (strcmp(args[0], "search") == 0) {
            search(args, arg_count);
            continue;
        }

        pid_t pid = fork();
        if (pid == 0) {
            execvp(args[0], args);
            printf("Command not found\n");
            exit(1);
        } else {
            wait(NULL);
        }
    }

    return 0;
}

