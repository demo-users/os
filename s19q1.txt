#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>
#include <sys/wait.h>

#define MAX 100

void list_files(const char *dirname) {
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    char path[512];

    dir = opendir(dirname);
    if (dir == NULL) {
        printf("Cannot open directory: %s\n", dirname);
        return;
    }

    while ((entry = readdir(dir)) != NULL) {
        snprintf(path, sizeof(path), "%s/%s", dirname, entry->d_name);
        if (stat(path, &fileStat) == 0 && S_ISREG(fileStat.st_mode)) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
}

int main() {
    char input[MAX];
    char *args[10];

    while (1) {
        printf("myshell$ ");
        fflush(stdout);

        if (fgets(input, sizeof(input), stdin) == NULL)
            break;

        input[strcspn(input, "\n")] = 0;

        int i = 0;
        char *token = strtok(input, " ");
        while (token != NULL && i < 10) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (args[0] == NULL)
            continue;

        if (strcmp(args[0], "exit") == 0)
            break;

        if (strcmp(args[0], "list") == 0 && i == 3 && strcmp(args[1], "f") == 0) {
            list_files(args[2]);
            continue;
        }

        pid_t pid = fork();
        if (pid == 0) {
            execvp(args[0], args);
            printf("Command not found.\n");
            exit(1);
        } else {
            wait(NULL);
        }
    }

    return 0;
}

