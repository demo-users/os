#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>

int make_toks(char *s, char *tok[])
{
    int i = 0;
    char *p = strtok(s, " ");
    while (p != NULL)
    {
        tok[i++] = p;
        p = strtok(NULL, " ");
    }
    tok[i] = NULL;
    return i;
}

void typeline(char *option, char *filename)
{
    int fd, n, count = 0;
    char c;

    fd = open(filename, O_RDONLY);
    if (fd == -1)
    {
        perror("File open error");
        return;
    }

    if (option[0] == '-' && option[1] == 'a')
    {
        while (read(fd, &c, 1) > 0)
            write(STDOUT_FILENO, &c, 1);
    }
    else if (option[0] == '+' && (n = atoi(option + 1)) > 0)
    {
        while (read(fd, &c, 1) > 0)
        {
            write(STDOUT_FILENO, &c, 1);
            if (c == '\n')
            {
                count++;
                if (count == n)
                    break;
            }
        }
    }
    else
    {
        printf("Invalid typeline option.\n");
    }

    close(fd);
}

int main()
{
    char input[100], *args[10];
    int pid, status;

    while (1)
    {
        printf("myshell$ ");
        if (!fgets(input, sizeof(input), stdin))
            break;

        input[strcspn(input, "\n")] = '\0';

        int n = make_toks(input, args);
        if (n == 0)
            continue;

        if (strcmp(args[0], "exit") == 0)
            exit(0);

        if (strcmp(args[0], "typeline") == 0 && n == 3)
        {
            typeline(args[1], args[2]);
            continue;
        }

        pid = fork();
        if (pid == 0)
        {
            execvp(args[0], args);
            perror("Execution failed");
            exit(1);
        }
        else if (pid > 0)
        {
            waitpid(pid, &status, 0);
        }
        else
        {
            perror("Fork failed");
        }
    }

    return 0;
}

