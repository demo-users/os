#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

void bubble_sort(int arr[], int n) {
    for (int i=0; i<n-1; i++) {
        for (int j=0; j<n-1-i; j++) {
            if (arr[j] > arr[j+1]) {
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    if (scanf("%d", &n) != 1 || n <= 0) {
        printf("Invalid number of elements\n");
        return 1;
    }

    int *arr = malloc(n * sizeof(int));
    if (!arr) {
        perror("malloc failed");
        return 1;
    }

    printf("Enter %d integers:\n", n);
    for (int i=0; i<n; i++) {
        if (scanf("%d", &arr[i]) != 1) {
            printf("Invalid input\n");
            free(arr);
            return 1;
        }
    }

    bubble_sort(arr, n);

    pid_t pid = fork();
    if (pid < 0) {
        perror("fork failed");
        free(arr);
        return 1;
    }

    if (pid == 0) {
        char **args = malloc((n + 2) * sizeof(char *));
        if (!args) {
            perror("malloc failed");
            free(arr);
            exit(1);
        }

        args[0] = "./child";
        for (int i = 0; i < n; i++) {
            char *buf = malloc(20);
            if (!buf) {
                perror("malloc failed");
                for (int k = 1; k < i; k++) free(args[k]);
                free(args);
                free(arr);
                exit(1);
            }
            snprintf(buf, 20, "%d", arr[i]);
            args[i + 1] = buf;
        }
        args[n + 1] = NULL;

        free(arr);
        execve("./child", args, NULL);

        perror("execve failed");
        for (int i = 1; i <= n; i++) free(args[i]);
        free(args);
        exit(1);
    } else {
        free(arr);
        wait(NULL);
    }

    return 0;
}

